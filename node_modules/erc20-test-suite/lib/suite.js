'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _helpers = require("./helpers");

var expect = require('chai').use(require('chai-bn')(web3.utils.BN)).expect;
/**
 * The test suite configuration.
 * @typedef {Object} SuiteOptions
 * @property {string[]} accounts
 *   The unlocked accounts to test with (starting at index 1). At least 4 accounts are required.
 *   Contract owner is expected to be accounts[0].
 * @property {TokenCreateCallback} create
 *   Callback to create token contract with.
 * @property {TokenTransferOrMintCallback} [transfer]
 *   Callback to transfer tokens with. Tokens must not be transferred from the account of index 1 or higher.
 * @property {TokenTransferOrMintCallback} [mint]
 *   Callback to mint tokens with.
 * @property {BN|number} [initialSupply]
 *   The initial token supply. Defaults to 0.
 * @property {[string, BN|number][]} initialBalances
 *   The tuples (account, balance) of initial account balances. Defaults to [] (no initial balance testing).
 * @property {[string, string, BN|number][]} initialAllowances
 *   The tuples (owner, spender, allowance) of initial allowances. Defaults to [] (no initial allowance testing).
 * @property {string} [name]
 *   The expected token name (if not provided, name is not tested).
 * @property {string} [symbol]
 *   The expected token symbol (if not provided, symbol is not tested).
 * @property {string} [decimals]
 *   The expected token number decimals (if not provided, decimals are not tested).
 * @property {boolean} [increaseDecreaseApproval]
 *   Controls whether increase and decrease approval functions should be tested (they are not part of the ERC-20).
 * @property {TokenCallback} [beforeEach]
 *   Callback to be called on every beforeEach.
 * @property {TokenCallback} [afterEach]
 *   Callback to be called on every afterEach.
 */

/**
 * The token creation callback.
 * @callback TokenCreateCallback
 * @returns {Object} The deployed token contract.
 */

/**
 * @callback TokenCallback
 * @param {Object} token The deployed token contract.
 */

/**
 * The token purchase callback.
 * @callback TokenTransferOrMintCallback
 * @param {Object} token The token created by TokenCreateCallback to transfer tokens of.
 * @param {string} to Account of the beneficiary.
 * @param {BN|number} amount The amount of the tokens to purchase.
 */

/**
 * Function will test the given contract to fullfil ERC-20 token standard.
 *
 * Expected to be called within mocha context.
 *
 * @param {SuiteOptions} options
 */


module.exports = function (options) {
  var accounts = options.accounts; // configure

  var initialSupply = (0, _helpers.bn)(options.initialSupply, 0);
  var initialBalances = options.initialBalances || [];
  var initialAllowances = options.initialAllowances || [];
  var create = options.create;
  var creditIsMinting = true;

  var credit = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(to, amount) {
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!options.mint) {
                _context.next = 7;
                break;
              }

              creditIsMinting = true;
              _context.next = 4;
              return options.mint(contract, to, amount);

            case 4:
              return _context.abrupt("return", _context.sent);

            case 7:
              creditIsMinting = false;
              _context.next = 10;
              return options.transfer(contract, to, amount);

            case 10:
              return _context.abrupt("return", _context.sent);

            case 11:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function credit(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }(); // setup


  var tokens = function tokens(amount) {
    return (0, _helpers.bn)(amount).imul((0, _helpers.bn)(10).pow(decimals));
  };

  var uintMax = (0, _helpers.bn)(2).pow((0, _helpers.bn)(256)).subn(1);
  var alice = accounts[1];
  var bob = accounts[2];
  var charles = accounts[3];
  var contract = null;
  var decimals = 0;
  beforeEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return create();

          case 2:
            contract = _context2.sent;

            if (!contract.decimals) {
              _context2.next = 9;
              break;
            }

            _context2.next = 6;
            return contract.decimals.call();

          case 6:
            _context2.t0 = _context2.sent;
            _context2.next = 10;
            break;

          case 9:
            _context2.t0 = 0;

          case 10:
            decimals = _context2.t0;

            if (!options.beforeEach) {
              _context2.next = 14;
              break;
            }

            _context2.next = 14;
            return options.beforeEach(contract);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  afterEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            if (!options.afterEach) {
              _context3.next = 3;
              break;
            }

            _context3.next = 3;
            return options.afterEach(contract);

          case 3:
            contract = null;
            decimals = 0;

          case 5:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  describe('ERC-20', function () {
    describe('totalSupply()', function () {
      it('should have initial supply of ' + initialSupply.toString(), /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.t0 = expect;
                _context4.next = 3;
                return contract.totalSupply.call();

              case 3:
                _context4.t1 = _context4.sent;
                (0, _context4.t0)(_context4.t1).to.be.bignumber.equal(initialSupply);

              case 5:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4);
      })));
      it('should return the correct supply', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5() {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                _context5.next = 2;
                return credit(alice, tokens(1));

              case 2:
                _context5.t0 = expect;
                _context5.next = 5;
                return contract.totalSupply.call();

              case 5:
                _context5.t1 = _context5.sent;
                (0, _context5.t0)(_context5.t1).to.be.bignumber.equal(creditIsMinting ? initialSupply.add(tokens(1)) : initialSupply);
                _context5.next = 9;
                return credit(alice, tokens(2));

              case 9:
                _context5.t2 = expect;
                _context5.next = 12;
                return contract.totalSupply.call();

              case 12:
                _context5.t3 = _context5.sent;
                (0, _context5.t2)(_context5.t3).to.be.bignumber.equal(creditIsMinting ? initialSupply.add(tokens(3)) : initialSupply);
                _context5.next = 16;
                return credit(bob, tokens(3));

              case 16:
                _context5.t4 = expect;
                _context5.next = 19;
                return contract.totalSupply.call();

              case 19:
                _context5.t5 = _context5.sent;
                (0, _context5.t4)(_context5.t5).to.be.bignumber.equal(creditIsMinting ? initialSupply.add(tokens(6)) : initialSupply);

              case 21:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5);
      })));
    });
    describe('balanceOf(_owner)', function () {
      it('should have correct initial balances', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6() {
        var i, address, balance;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < initialBalances.length)) {
                  _context6.next = 12;
                  break;
                }

                address = initialBalances[i][0];
                balance = initialBalances[i][1];
                _context6.t0 = expect;
                _context6.next = 7;
                return contract.balanceOf.call(address);

              case 7:
                _context6.t1 = _context6.sent;
                (0, _context6.t0)(_context6.t1).to.be.bignumber.equal(balance);

              case 9:
                i++;
                _context6.next = 1;
                break;

              case 12:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6);
      })));
      it('should return the correct balances', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7() {
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.next = 2;
                return credit(alice, tokens(1));

              case 2:
                _context7.t0 = expect;
                _context7.next = 5;
                return contract.balanceOf.call(alice);

              case 5:
                _context7.t1 = _context7.sent;
                (0, _context7.t0)(_context7.t1).to.be.bignumber.equal(tokens(1));
                _context7.next = 9;
                return credit(alice, tokens(2));

              case 9:
                _context7.t2 = expect;
                _context7.next = 12;
                return contract.balanceOf.call(alice);

              case 12:
                _context7.t3 = _context7.sent;
                (0, _context7.t2)(_context7.t3).to.be.bignumber.equal(tokens(3));
                _context7.next = 16;
                return credit(bob, tokens(3));

              case 16:
                _context7.t4 = expect;
                _context7.next = 19;
                return contract.balanceOf.call(bob);

              case 19:
                _context7.t5 = _context7.sent;
                (0, _context7.t4)(_context7.t5).to.be.bignumber.equal(tokens(3));

              case 21:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7);
      })));
    });
    describe('allowance(_owner, _spender)', function () {
      describeIt(when('_owner != _spender'), alice, bob);
      describeIt(when('_owner == _spender'), alice, alice);
      it('should have correct initial allowance', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
        var i, owner, spender, expectedAllowance;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                i = 0;

              case 1:
                if (!(i < initialAllowances.length)) {
                  _context8.next = 13;
                  break;
                }

                owner = initialAllowances[i][0];
                spender = initialAllowances[i][1];
                expectedAllowance = initialAllowances[i][2];
                _context8.t0 = expect;
                _context8.next = 8;
                return contract.allowance.call(owner, spender);

              case 8:
                _context8.t1 = _context8.sent;
                (0, _context8.t0)(_context8.t1).to.be.bignumber.equal(expectedAllowance);

              case 10:
                i++;
                _context8.next = 1;
                break;

              case 13:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8);
      })));
      it('should return the correct allowance', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return contract.approve(bob, tokens(1), {
                  from: alice
                });

              case 2:
                _context9.next = 4;
                return contract.approve(charles, tokens(2), {
                  from: alice
                });

              case 4:
                _context9.next = 6;
                return contract.approve(charles, tokens(3), {
                  from: bob
                });

              case 6:
                _context9.next = 8;
                return contract.approve(alice, tokens(4), {
                  from: bob
                });

              case 8:
                _context9.next = 10;
                return contract.approve(alice, tokens(5), {
                  from: charles
                });

              case 10:
                _context9.next = 12;
                return contract.approve(bob, tokens(6), {
                  from: charles
                });

              case 12:
                _context9.t0 = expect;
                _context9.next = 15;
                return contract.allowance.call(alice, bob);

              case 15:
                _context9.t1 = _context9.sent;
                (0, _context9.t0)(_context9.t1).to.be.bignumber.equal(tokens(1));
                _context9.t2 = expect;
                _context9.next = 20;
                return contract.allowance.call(alice, charles);

              case 20:
                _context9.t3 = _context9.sent;
                (0, _context9.t2)(_context9.t3).to.be.bignumber.equal(tokens(2));
                _context9.t4 = expect;
                _context9.next = 25;
                return contract.allowance.call(bob, charles);

              case 25:
                _context9.t5 = _context9.sent;
                (0, _context9.t4)(_context9.t5).to.be.bignumber.equal(tokens(3));
                _context9.t6 = expect;
                _context9.next = 30;
                return contract.allowance.call(bob, alice);

              case 30:
                _context9.t7 = _context9.sent;
                (0, _context9.t6)(_context9.t7).to.be.bignumber.equal(tokens(4));
                _context9.t8 = expect;
                _context9.next = 35;
                return contract.allowance.call(charles, alice);

              case 35:
                _context9.t9 = _context9.sent;
                (0, _context9.t8)(_context9.t9).to.be.bignumber.equal(tokens(5));
                _context9.t10 = expect;
                _context9.next = 40;
                return contract.allowance.call(charles, bob);

              case 40:
                _context9.t11 = _context9.sent;
                (0, _context9.t10)(_context9.t11).to.be.bignumber.equal(tokens(6));

              case 42:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9);
      })));

      function describeIt(name, from, to) {
        describe(name, function () {
          it('should return the correct allowance', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee10() {
            return _regenerator["default"].wrap(function _callee10$(_context10) {
              while (1) {
                switch (_context10.prev = _context10.next) {
                  case 0:
                    _context10.next = 2;
                    return contract.approve(to, tokens(1), {
                      from: from
                    });

                  case 2:
                    _context10.t0 = expect;
                    _context10.next = 5;
                    return contract.allowance.call(from, to);

                  case 5:
                    _context10.t1 = _context10.sent;
                    (0, _context10.t0)(_context10.t1).to.be.bignumber.equal(tokens(1));

                  case 7:
                  case "end":
                    return _context10.stop();
                }
              }
            }, _callee10);
          })));
        });
      }
    }); // NOTE: assumes that approve should always succeed

    describe('approve(_spender, _value)', function () {
      describeIt(when('_spender != sender'), alice, bob);
      describeIt(when('_spender == sender'), alice, alice);

      function describeIt(name, from, to) {
        describe(name, function () {
          it('should return true when approving 0', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee11() {
            return _regenerator["default"].wrap(function _callee11$(_context11) {
              while (1) {
                switch (_context11.prev = _context11.next) {
                  case 0:
                    _context11.t0 = assert;
                    _context11.next = 3;
                    return contract.approve.call(to, 0, {
                      from: from
                    });

                  case 3:
                    _context11.t1 = _context11.sent;

                    _context11.t0.isTrue.call(_context11.t0, _context11.t1);

                  case 5:
                  case "end":
                    return _context11.stop();
                }
              }
            }, _callee11);
          })));
          it('should return true when approving', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee12() {
            return _regenerator["default"].wrap(function _callee12$(_context12) {
              while (1) {
                switch (_context12.prev = _context12.next) {
                  case 0:
                    _context12.t0 = assert;
                    _context12.next = 3;
                    return contract.approve.call(to, tokens(3), {
                      from: from
                    });

                  case 3:
                    _context12.t1 = _context12.sent;

                    _context12.t0.isTrue.call(_context12.t0, _context12.t1);

                  case 5:
                  case "end":
                    return _context12.stop();
                }
              }
            }, _callee12);
          })));
          it('should return true when updating approval', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee13() {
            return _regenerator["default"].wrap(function _callee13$(_context13) {
              while (1) {
                switch (_context13.prev = _context13.next) {
                  case 0:
                    _context13.t0 = assert;
                    _context13.next = 3;
                    return contract.approve.call(to, tokens(2), {
                      from: from
                    });

                  case 3:
                    _context13.t1 = _context13.sent;

                    _context13.t0.isTrue.call(_context13.t0, _context13.t1);

                    _context13.next = 7;
                    return contract.approve(to, tokens(2), {
                      from: from
                    });

                  case 7:
                    _context13.t2 = assert;
                    _context13.next = 10;
                    return contract.approve.call(to, tokens(1), {
                      from: from
                    });

                  case 10:
                    _context13.t3 = _context13.sent;

                    _context13.t2.isTrue.call(_context13.t2, _context13.t3);

                    _context13.t4 = assert;
                    _context13.next = 15;
                    return contract.approve.call(to, tokens(2), {
                      from: from
                    });

                  case 15:
                    _context13.t5 = _context13.sent;

                    _context13.t4.isTrue.call(_context13.t4, _context13.t5);

                    _context13.t6 = assert;
                    _context13.next = 20;
                    return contract.approve.call(to, tokens(3), {
                      from: from
                    });

                  case 20:
                    _context13.t7 = _context13.sent;

                    _context13.t6.isTrue.call(_context13.t6, _context13.t7);

                  case 22:
                  case "end":
                    return _context13.stop();
                }
              }
            }, _callee13);
          })));
          it('should return true when revoking approval', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee14() {
            return _regenerator["default"].wrap(function _callee14$(_context14) {
              while (1) {
                switch (_context14.prev = _context14.next) {
                  case 0:
                    _context14.next = 2;
                    return contract.approve(to, tokens(3), {
                      from: from
                    });

                  case 2:
                    _context14.t0 = assert;
                    _context14.next = 5;
                    return contract.approve.call(to, tokens(0), {
                      from: from
                    });

                  case 5:
                    _context14.t1 = _context14.sent;

                    _context14.t0.isTrue.call(_context14.t0, _context14.t1);

                  case 7:
                  case "end":
                    return _context14.stop();
                }
              }
            }, _callee14);
          })));
          it('should update allowance accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee15() {
            return _regenerator["default"].wrap(function _callee15$(_context15) {
              while (1) {
                switch (_context15.prev = _context15.next) {
                  case 0:
                    _context15.next = 2;
                    return contract.approve(to, tokens(1), {
                      from: from
                    });

                  case 2:
                    _context15.t0 = expect;
                    _context15.next = 5;
                    return contract.allowance(from, to);

                  case 5:
                    _context15.t1 = _context15.sent;
                    (0, _context15.t0)(_context15.t1).to.be.bignumber.equal(tokens(1));
                    _context15.next = 9;
                    return contract.approve(to, tokens(3), {
                      from: from
                    });

                  case 9:
                    _context15.t2 = expect;
                    _context15.next = 12;
                    return contract.allowance(from, to);

                  case 12:
                    _context15.t3 = _context15.sent;
                    (0, _context15.t2)(_context15.t3).to.be.bignumber.equal(tokens(3));
                    _context15.next = 16;
                    return contract.approve(to, 0, {
                      from: from
                    });

                  case 16:
                    _context15.t4 = expect;
                    _context15.next = 19;
                    return contract.allowance(from, to);

                  case 19:
                    _context15.t5 = _context15.sent;
                    (0, _context15.t4)(_context15.t5).to.be.bignumber.equal('0');

                  case 21:
                  case "end":
                    return _context15.stop();
                }
              }
            }, _callee15);
          })));
          it('should fire Approval event', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee16() {
            return _regenerator["default"].wrap(function _callee16$(_context16) {
              while (1) {
                switch (_context16.prev = _context16.next) {
                  case 0:
                    _context16.next = 2;
                    return testApprovalEvent(from, to, tokens(1));

                  case 2:
                    if (!(from != to)) {
                      _context16.next = 5;
                      break;
                    }

                    _context16.next = 5;
                    return testApprovalEvent(to, from, tokens(2));

                  case 5:
                  case "end":
                    return _context16.stop();
                }
              }
            }, _callee16);
          })));
          it('should fire Approval when allowance was set to 0', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee17() {
            return _regenerator["default"].wrap(function _callee17$(_context17) {
              while (1) {
                switch (_context17.prev = _context17.next) {
                  case 0:
                    _context17.next = 2;
                    return contract.approve(to, tokens(3), {
                      from: from
                    });

                  case 2:
                    _context17.next = 4;
                    return testApprovalEvent(from, to, 0);

                  case 4:
                  case "end":
                    return _context17.stop();
                }
              }
            }, _callee17);
          })));
          it('should fire Approval even when allowance did not change', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee18() {
            return _regenerator["default"].wrap(function _callee18$(_context18) {
              while (1) {
                switch (_context18.prev = _context18.next) {
                  case 0:
                    _context18.next = 2;
                    return testApprovalEvent(from, to, 0);

                  case 2:
                    _context18.next = 4;
                    return contract.approve(to, tokens(3), {
                      from: from
                    });

                  case 4:
                    _context18.next = 6;
                    return testApprovalEvent(from, to, tokens(3));

                  case 6:
                  case "end":
                    return _context18.stop();
                }
              }
            }, _callee18);
          })));
        });
      }

      function testApprovalEvent(_x3, _x4, _x5) {
        return _testApprovalEvent.apply(this, arguments);
      }

      function _testApprovalEvent() {
        _testApprovalEvent = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee19(from, to, amount) {
          var result, log;
          return _regenerator["default"].wrap(function _callee19$(_context19) {
            while (1) {
              switch (_context19.prev = _context19.next) {
                case 0:
                  _context19.next = 2;
                  return contract.approve(to, amount, {
                    from: from
                  });

                case 2:
                  result = _context19.sent;
                  log = result.logs[0];
                  assert.equal(log.event, 'Approval');
                  assert.equal(log.args.owner, from);
                  assert.equal(log.args.spender, to);
                  expect(log.args.value).to.be.bignumber.equal((0, _helpers.bn)(amount));

                case 8:
                case "end":
                  return _context19.stop();
              }
            }
          }, _callee19);
        }));
        return _testApprovalEvent.apply(this, arguments);
      }
    });
    describe('transfer(_to, _value)', function () {
      describeIt(when('_to != sender'), alice, bob);
      describeIt(when('_to == sender'), alice, alice);

      function describeIt(name, from, to) {
        describe(name, function () {
          it('should return true when called with amount of 0', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee20() {
            return _regenerator["default"].wrap(function _callee20$(_context20) {
              while (1) {
                switch (_context20.prev = _context20.next) {
                  case 0:
                    _context20.t0 = assert;
                    _context20.next = 3;
                    return contract.transfer.call(to, 0, {
                      from: from
                    });

                  case 3:
                    _context20.t1 = _context20.sent;

                    _context20.t0.isTrue.call(_context20.t0, _context20.t1);

                  case 5:
                  case "end":
                    return _context20.stop();
                }
              }
            }, _callee20);
          })));
          it('should return true when transfer can be made, false otherwise', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee21() {
            return _regenerator["default"].wrap(function _callee21$(_context21) {
              while (1) {
                switch (_context21.prev = _context21.next) {
                  case 0:
                    _context21.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context21.t0 = assert;
                    _context21.next = 5;
                    return contract.transfer.call(to, tokens(1), {
                      from: from
                    });

                  case 5:
                    _context21.t1 = _context21.sent;

                    _context21.t0.isTrue.call(_context21.t0, _context21.t1);

                    _context21.t2 = assert;
                    _context21.next = 10;
                    return contract.transfer.call(to, tokens(2), {
                      from: from
                    });

                  case 10:
                    _context21.t3 = _context21.sent;

                    _context21.t2.isTrue.call(_context21.t2, _context21.t3);

                    _context21.t4 = assert;
                    _context21.next = 15;
                    return contract.transfer.call(to, tokens(3), {
                      from: from
                    });

                  case 15:
                    _context21.t5 = _context21.sent;

                    _context21.t4.isTrue.call(_context21.t4, _context21.t5);

                    _context21.next = 19;
                    return contract.transfer(to, tokens(1), {
                      from: from
                    });

                  case 19:
                    _context21.t6 = assert;
                    _context21.next = 22;
                    return contract.transfer.call(to, tokens(1), {
                      from: from
                    });

                  case 22:
                    _context21.t7 = _context21.sent;

                    _context21.t6.isTrue.call(_context21.t6, _context21.t7);

                    _context21.t8 = assert;
                    _context21.next = 27;
                    return contract.transfer.call(to, tokens(2), {
                      from: from
                    });

                  case 27:
                    _context21.t9 = _context21.sent;

                    _context21.t8.isTrue.call(_context21.t8, _context21.t9);

                  case 29:
                  case "end":
                    return _context21.stop();
                }
              }
            }, _callee21);
          })));
          it('should revert when trying to transfer something while having nothing', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee22() {
            return _regenerator["default"].wrap(function _callee22$(_context22) {
              while (1) {
                switch (_context22.prev = _context22.next) {
                  case 0:
                    _context22.next = 2;
                    return (0, _helpers.expectRevertOrFail)(contract.transfer(to, tokens(1), {
                      from: from
                    }));

                  case 2:
                  case "end":
                    return _context22.stop();
                }
              }
            }, _callee22);
          })));
          it('should revert when trying to transfer more than balance', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee23() {
            return _regenerator["default"].wrap(function _callee23$(_context23) {
              while (1) {
                switch (_context23.prev = _context23.next) {
                  case 0:
                    _context23.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context23.next = 4;
                    return (0, _helpers.expectRevertOrFail)(contract.transfer(to, tokens(4), {
                      from: from
                    }));

                  case 4:
                    _context23.next = 6;
                    return contract.transfer('0x0000000000000000000000000000000000000001', tokens(1), {
                      from: from
                    });

                  case 6:
                    _context23.next = 8;
                    return (0, _helpers.expectRevertOrFail)(contract.transfer(to, tokens(3), {
                      from: from
                    }));

                  case 8:
                  case "end":
                    return _context23.stop();
                }
              }
            }, _callee23);
          })));
          it('should not affect totalSupply', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee24() {
            var supply1, supply2;
            return _regenerator["default"].wrap(function _callee24$(_context24) {
              while (1) {
                switch (_context24.prev = _context24.next) {
                  case 0:
                    _context24.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context24.next = 4;
                    return contract.totalSupply.call();

                  case 4:
                    supply1 = _context24.sent;
                    _context24.next = 7;
                    return contract.transfer(to, tokens(3), {
                      from: from
                    });

                  case 7:
                    _context24.next = 9;
                    return contract.totalSupply.call();

                  case 9:
                    supply2 = _context24.sent;
                    expect(supply2).to.be.be.bignumber.equal(supply1);

                  case 11:
                  case "end":
                    return _context24.stop();
                }
              }
            }, _callee24);
          })));
          it('should update balances accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee25() {
            var fromBalance1, toBalance1, fromBalance2, toBalance2, fromBalance3, toBalance3;
            return _regenerator["default"].wrap(function _callee25$(_context25) {
              while (1) {
                switch (_context25.prev = _context25.next) {
                  case 0:
                    _context25.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context25.next = 4;
                    return contract.balanceOf.call(from);

                  case 4:
                    fromBalance1 = _context25.sent;
                    _context25.next = 7;
                    return contract.balanceOf.call(to);

                  case 7:
                    toBalance1 = _context25.sent;
                    _context25.next = 10;
                    return contract.transfer(to, tokens(1), {
                      from: from
                    });

                  case 10:
                    _context25.next = 12;
                    return contract.balanceOf.call(from);

                  case 12:
                    fromBalance2 = _context25.sent;
                    _context25.next = 15;
                    return contract.balanceOf.call(to);

                  case 15:
                    toBalance2 = _context25.sent;

                    if (from == to) {
                      expect(fromBalance2).to.be.bignumber.equal(fromBalance1);
                    } else {
                      expect(fromBalance2).to.be.bignumber.equal(fromBalance1.sub(tokens(1)));
                      expect(toBalance2).to.be.bignumber.equal(toBalance1.add(tokens(1)));
                    }

                    _context25.next = 19;
                    return contract.transfer(to, tokens(2), {
                      from: from
                    });

                  case 19:
                    _context25.next = 21;
                    return contract.balanceOf.call(from);

                  case 21:
                    fromBalance3 = _context25.sent;
                    _context25.next = 24;
                    return contract.balanceOf.call(to);

                  case 24:
                    toBalance3 = _context25.sent;

                    if (from == to) {
                      expect(fromBalance3).to.be.bignumber.equal(fromBalance2);
                    } else {
                      expect(fromBalance3).to.be.bignumber.equal(fromBalance2.sub(tokens(2)));
                      expect(toBalance3).to.be.bignumber.equal(toBalance2.add(tokens(2)));
                    }

                  case 26:
                  case "end":
                    return _context25.stop();
                }
              }
            }, _callee25);
          })));
          it('should fire Transfer event', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee26() {
            return _regenerator["default"].wrap(function _callee26$(_context26) {
              while (1) {
                switch (_context26.prev = _context26.next) {
                  case 0:
                    _context26.next = 2;
                    return testTransferEvent(from, to, tokens(3));

                  case 2:
                  case "end":
                    return _context26.stop();
                }
              }
            }, _callee26);
          })));
          it('should fire Transfer event when transferring amount of 0', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee27() {
            return _regenerator["default"].wrap(function _callee27$(_context27) {
              while (1) {
                switch (_context27.prev = _context27.next) {
                  case 0:
                    _context27.next = 2;
                    return testTransferEvent(from, to, 0);

                  case 2:
                  case "end":
                    return _context27.stop();
                }
              }
            }, _callee27);
          })));
        });
      }

      function testTransferEvent(_x6, _x7, _x8) {
        return _testTransferEvent.apply(this, arguments);
      }

      function _testTransferEvent() {
        _testTransferEvent = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee28(from, to, amount) {
          var result, log;
          return _regenerator["default"].wrap(function _callee28$(_context28) {
            while (1) {
              switch (_context28.prev = _context28.next) {
                case 0:
                  if (!(amount > 0)) {
                    _context28.next = 3;
                    break;
                  }

                  _context28.next = 3;
                  return credit(from, amount);

                case 3:
                  _context28.next = 5;
                  return contract.transfer(to, amount, {
                    from: from
                  });

                case 5:
                  result = _context28.sent;
                  log = result.logs[0];
                  assert.equal(log.event, 'Transfer');
                  assert.equal(log.args.from, from);
                  assert.equal(log.args.to, to);
                  expect(log.args.value).to.be.bignumber.equal((0, _helpers.bn)(amount));

                case 11:
                case "end":
                  return _context28.stop();
              }
            }
          }, _callee28);
        }));
        return _testTransferEvent.apply(this, arguments);
      }
    });
    describe('transferFrom(_from, _to, _value)', function () {
      describeIt(when('_from != _to and _to != sender'), alice, bob, charles);
      describeIt(when('_from != _to and _to == sender'), alice, bob, bob);

      if (options.allowanceSendToSelf) {
        describeIt(when('_from == _to and _to != sender'), alice, alice, bob);
        describeIt(when('_from == _to and _to == sender'), alice, alice, alice);
      }

      it('should revert when trying to transfer while not allowed at all', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee29() {
        return _regenerator["default"].wrap(function _callee29$(_context29) {
          while (1) {
            switch (_context29.prev = _context29.next) {
              case 0:
                _context29.next = 2;
                return credit(alice, tokens(3));

              case 2:
                _context29.next = 4;
                return (0, _helpers.expectRevertOrFail)(contract.transferFrom(alice, bob, tokens(1), {
                  from: bob
                }));

              case 4:
                _context29.next = 6;
                return (0, _helpers.expectRevertOrFail)(contract.transferFrom(alice, charles, tokens(1), {
                  from: bob
                }));

              case 6:
              case "end":
                return _context29.stop();
            }
          }
        }, _callee29);
      })));
      it('should fire Transfer event when transferring amount of 0 and sender is not approved', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee30() {
        return _regenerator["default"].wrap(function _callee30$(_context30) {
          while (1) {
            switch (_context30.prev = _context30.next) {
              case 0:
                _context30.next = 2;
                return testTransferEvent(alice, bob, bob, 0);

              case 2:
              case "end":
                return _context30.stop();
            }
          }
        }, _callee30);
      })));

      function describeIt(name, from, via, to) {
        describe(name, function () {
          beforeEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee31() {
            return _regenerator["default"].wrap(function _callee31$(_context31) {
              while (1) {
                switch (_context31.prev = _context31.next) {
                  case 0:
                    _context31.next = 2;
                    return contract.approve(via, tokens(3), {
                      from: from
                    });

                  case 2:
                  case "end":
                    return _context31.stop();
                }
              }
            }, _callee31);
          })));
          it('should return true when called with amount of 0 and sender is approved', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee32() {
            return _regenerator["default"].wrap(function _callee32$(_context32) {
              while (1) {
                switch (_context32.prev = _context32.next) {
                  case 0:
                    _context32.t0 = assert;
                    _context32.next = 3;
                    return contract.transferFrom.call(from, to, 0, {
                      from: via
                    });

                  case 3:
                    _context32.t1 = _context32.sent;

                    _context32.t0.isTrue.call(_context32.t0, _context32.t1);

                  case 5:
                  case "end":
                    return _context32.stop();
                }
              }
            }, _callee32);
          })));
          it('should return true when called with amount of 0 and sender is not approved', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee33() {
            return _regenerator["default"].wrap(function _callee33$(_context33) {
              while (1) {
                switch (_context33.prev = _context33.next) {
                  case 0:
                    _context33.t0 = assert;
                    _context33.next = 3;
                    return contract.transferFrom.call(to, from, 0, {
                      from: via
                    });

                  case 3:
                    _context33.t1 = _context33.sent;

                    _context33.t0.isTrue.call(_context33.t0, _context33.t1);

                  case 5:
                  case "end":
                    return _context33.stop();
                }
              }
            }, _callee33);
          })));
          it('should return true when transfer can be made, false otherwise', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee34() {
            return _regenerator["default"].wrap(function _callee34$(_context34) {
              while (1) {
                switch (_context34.prev = _context34.next) {
                  case 0:
                    _context34.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context34.t0 = assert;
                    _context34.next = 5;
                    return contract.transferFrom.call(from, to, tokens(1), {
                      from: via
                    });

                  case 5:
                    _context34.t1 = _context34.sent;

                    _context34.t0.isTrue.call(_context34.t0, _context34.t1);

                    _context34.t2 = assert;
                    _context34.next = 10;
                    return contract.transferFrom.call(from, to, tokens(2), {
                      from: via
                    });

                  case 10:
                    _context34.t3 = _context34.sent;

                    _context34.t2.isTrue.call(_context34.t2, _context34.t3);

                    _context34.t4 = assert;
                    _context34.next = 15;
                    return contract.transferFrom.call(from, to, tokens(3), {
                      from: via
                    });

                  case 15:
                    _context34.t5 = _context34.sent;

                    _context34.t4.isTrue.call(_context34.t4, _context34.t5);

                    _context34.next = 19;
                    return contract.transferFrom(from, to, tokens(1), {
                      from: via
                    });

                  case 19:
                    _context34.t6 = assert;
                    _context34.next = 22;
                    return contract.transferFrom.call(from, to, tokens(1), {
                      from: via
                    });

                  case 22:
                    _context34.t7 = _context34.sent;

                    _context34.t6.isTrue.call(_context34.t6, _context34.t7);

                    _context34.t8 = assert;
                    _context34.next = 27;
                    return contract.transferFrom.call(from, to, tokens(2), {
                      from: via
                    });

                  case 27:
                    _context34.t9 = _context34.sent;

                    _context34.t8.isTrue.call(_context34.t8, _context34.t9);

                  case 29:
                  case "end":
                    return _context34.stop();
                }
              }
            }, _callee34);
          })));
          it('should revert when trying to transfer something while _from having nothing', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee35() {
            return _regenerator["default"].wrap(function _callee35$(_context35) {
              while (1) {
                switch (_context35.prev = _context35.next) {
                  case 0:
                    _context35.next = 2;
                    return (0, _helpers.expectRevertOrFail)(contract.transferFrom(from, to, tokens(1), {
                      from: via
                    }));

                  case 2:
                  case "end":
                    return _context35.stop();
                }
              }
            }, _callee35);
          })));
          it('should revert when trying to transfer more than balance of _from', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee36() {
            return _regenerator["default"].wrap(function _callee36$(_context36) {
              while (1) {
                switch (_context36.prev = _context36.next) {
                  case 0:
                    _context36.next = 2;
                    return credit(from, tokens(2));

                  case 2:
                    _context36.next = 4;
                    return (0, _helpers.expectRevertOrFail)(contract.transferFrom(from, to, tokens(3), {
                      from: via
                    }));

                  case 4:
                  case "end":
                    return _context36.stop();
                }
              }
            }, _callee36);
          })));
          it('should revert when trying to transfer more than allowed', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee37() {
            return _regenerator["default"].wrap(function _callee37$(_context37) {
              while (1) {
                switch (_context37.prev = _context37.next) {
                  case 0:
                    _context37.next = 2;
                    return credit(from, tokens(4));

                  case 2:
                    _context37.next = 4;
                    return (0, _helpers.expectRevertOrFail)(contract.transferFrom(from, to, tokens(4), {
                      from: via
                    }));

                  case 4:
                  case "end":
                    return _context37.stop();
                }
              }
            }, _callee37);
          })));
          it('should not affect totalSupply', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee38() {
            var supply1, supply2;
            return _regenerator["default"].wrap(function _callee38$(_context38) {
              while (1) {
                switch (_context38.prev = _context38.next) {
                  case 0:
                    _context38.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context38.next = 4;
                    return contract.totalSupply.call();

                  case 4:
                    supply1 = _context38.sent;
                    _context38.next = 7;
                    return contract.transferFrom(from, to, tokens(3), {
                      from: via
                    });

                  case 7:
                    _context38.next = 9;
                    return contract.totalSupply.call();

                  case 9:
                    supply2 = _context38.sent;
                    expect(supply2).to.be.be.bignumber.equal(supply1);

                  case 11:
                  case "end":
                    return _context38.stop();
                }
              }
            }, _callee38);
          })));
          it('should update balances accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee39() {
            var fromBalance1, viaBalance1, toBalance1, fromBalance2, viaBalance2, toBalance2, fromBalance3, viaBalance3, toBalance3;
            return _regenerator["default"].wrap(function _callee39$(_context39) {
              while (1) {
                switch (_context39.prev = _context39.next) {
                  case 0:
                    _context39.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context39.next = 4;
                    return contract.balanceOf.call(from);

                  case 4:
                    fromBalance1 = _context39.sent;
                    _context39.next = 7;
                    return contract.balanceOf.call(via);

                  case 7:
                    viaBalance1 = _context39.sent;
                    _context39.next = 10;
                    return contract.balanceOf.call(to);

                  case 10:
                    toBalance1 = _context39.sent;
                    _context39.next = 13;
                    return contract.transferFrom(from, to, tokens(1), {
                      from: via
                    });

                  case 13:
                    _context39.next = 15;
                    return contract.balanceOf.call(from);

                  case 15:
                    fromBalance2 = _context39.sent;
                    _context39.next = 18;
                    return contract.balanceOf.call(via);

                  case 18:
                    viaBalance2 = _context39.sent;
                    _context39.next = 21;
                    return contract.balanceOf.call(to);

                  case 21:
                    toBalance2 = _context39.sent;

                    if (from == to) {
                      expect(fromBalance2).to.be.bignumber.equal(fromBalance1);
                    } else {
                      expect(fromBalance2).to.be.bignumber.equal(fromBalance1.sub(tokens(1)));
                      expect(toBalance2).to.be.bignumber.equal(toBalance1.add(tokens(1)));
                    }

                    if (via != from && via != to) {
                      expect(viaBalance2).to.be.bignumber.equal(viaBalance1);
                    }

                    _context39.next = 26;
                    return contract.transferFrom(from, to, tokens(2), {
                      from: via
                    });

                  case 26:
                    _context39.next = 28;
                    return contract.balanceOf.call(from);

                  case 28:
                    fromBalance3 = _context39.sent;
                    _context39.next = 31;
                    return contract.balanceOf.call(via);

                  case 31:
                    viaBalance3 = _context39.sent;
                    _context39.next = 34;
                    return contract.balanceOf.call(to);

                  case 34:
                    toBalance3 = _context39.sent;

                    if (from == to) {
                      expect(fromBalance3).to.be.bignumber.equal(fromBalance2);
                    } else {
                      expect(fromBalance3).to.be.bignumber.equal(fromBalance2.sub(tokens(2)));
                      expect(toBalance3).to.be.bignumber.equal(toBalance2.add(tokens(2)));
                    }

                    if (via != from && via != to) {
                      expect(viaBalance3).to.be.bignumber.equal(viaBalance2);
                    }

                  case 37:
                  case "end":
                    return _context39.stop();
                }
              }
            }, _callee39);
          })));
          it('should update allowances accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee40() {
            var viaAllowance1, toAllowance1, viaAllowance2, toAllowance2, viaAllowance3, toAllowance3;
            return _regenerator["default"].wrap(function _callee40$(_context40) {
              while (1) {
                switch (_context40.prev = _context40.next) {
                  case 0:
                    _context40.next = 2;
                    return credit(from, tokens(3));

                  case 2:
                    _context40.next = 4;
                    return contract.allowance.call(from, via);

                  case 4:
                    viaAllowance1 = _context40.sent;
                    _context40.next = 7;
                    return contract.allowance.call(from, to);

                  case 7:
                    toAllowance1 = _context40.sent;
                    _context40.next = 10;
                    return contract.transferFrom(from, to, tokens(2), {
                      from: via
                    });

                  case 10:
                    _context40.next = 12;
                    return contract.allowance.call(from, via);

                  case 12:
                    viaAllowance2 = _context40.sent;
                    _context40.next = 15;
                    return contract.allowance.call(from, to);

                  case 15:
                    toAllowance2 = _context40.sent;
                    expect(viaAllowance2).to.be.bignumber.equal(viaAllowance1.sub(tokens(2)));

                    if (to != via) {
                      expect(toAllowance2).to.be.bignumber.equal(toAllowance1);
                    }

                    _context40.next = 20;
                    return contract.transferFrom(from, to, tokens(1), {
                      from: via
                    });

                  case 20:
                    _context40.next = 22;
                    return contract.allowance.call(from, via);

                  case 22:
                    viaAllowance3 = _context40.sent;
                    _context40.next = 25;
                    return contract.allowance.call(from, to);

                  case 25:
                    toAllowance3 = _context40.sent;
                    expect(viaAllowance3).to.be.bignumber.equal(viaAllowance2.sub(tokens(1)));

                    if (to != via) {
                      expect(toAllowance3).to.be.bignumber.equal(toAllowance1);
                    }

                  case 28:
                  case "end":
                    return _context40.stop();
                }
              }
            }, _callee40);
          })));
          it('should fire Transfer event', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee41() {
            return _regenerator["default"].wrap(function _callee41$(_context41) {
              while (1) {
                switch (_context41.prev = _context41.next) {
                  case 0:
                    _context41.next = 2;
                    return testTransferEvent(from, via, to, tokens(3));

                  case 2:
                  case "end":
                    return _context41.stop();
                }
              }
            }, _callee41);
          })));
          it('should fire Transfer event when transferring amount of 0', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee42() {
            return _regenerator["default"].wrap(function _callee42$(_context42) {
              while (1) {
                switch (_context42.prev = _context42.next) {
                  case 0:
                    _context42.next = 2;
                    return testTransferEvent(from, via, to, 0);

                  case 2:
                  case "end":
                    return _context42.stop();
                }
              }
            }, _callee42);
          })));
        });
      }

      function testTransferEvent(_x9, _x10, _x11, _x12) {
        return _testTransferEvent2.apply(this, arguments);
      }

      function _testTransferEvent2() {
        _testTransferEvent2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee43(from, via, to, amount) {
          var result, log;
          return _regenerator["default"].wrap(function _callee43$(_context43) {
            while (1) {
              switch (_context43.prev = _context43.next) {
                case 0:
                  if (!(amount > 0)) {
                    _context43.next = 3;
                    break;
                  }

                  _context43.next = 3;
                  return credit(from, amount);

                case 3:
                  _context43.next = 5;
                  return contract.transferFrom(from, to, amount, {
                    from: via
                  });

                case 5:
                  result = _context43.sent;
                  log = result.logs[0];
                  assert.equal(log.event, 'Transfer');
                  assert.equal(log.args.from, from);
                  assert.equal(log.args.to, to);
                  expect(log.args.value).to.be.bignumber.equal((0, _helpers.bn)(amount));

                case 11:
                case "end":
                  return _context43.stop();
              }
            }
          }, _callee43);
        }));
        return _testTransferEvent2.apply(this, arguments);
      }
    });
  });
  describe('ERC-20 optional', function () {
    describe('name()', function () {
      if (options.name != null) {
        it("should return '" + options.name + "'", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee44() {
          return _regenerator["default"].wrap(function _callee44$(_context44) {
            while (1) {
              switch (_context44.prev = _context44.next) {
                case 0:
                  _context44.t0 = assert;
                  _context44.next = 3;
                  return contract.name.call();

                case 3:
                  _context44.t1 = _context44.sent;
                  _context44.t2 = options.name;

                  _context44.t0.equal.call(_context44.t0, _context44.t1, _context44.t2);

                case 6:
                case "end":
                  return _context44.stop();
              }
            }
          }, _callee44);
        })));
      }
    });
    describe('symbol()', function () {
      if (options.symbol != null) {
        it("should return '" + options.symbol + "'", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee45() {
          return _regenerator["default"].wrap(function _callee45$(_context45) {
            while (1) {
              switch (_context45.prev = _context45.next) {
                case 0:
                  _context45.t0 = assert;
                  _context45.next = 3;
                  return contract.symbol.call();

                case 3:
                  _context45.t1 = _context45.sent;
                  _context45.t2 = options.symbol;

                  _context45.t0.equal.call(_context45.t0, _context45.t1, _context45.t2);

                case 6:
                case "end":
                  return _context45.stop();
              }
            }
          }, _callee45);
        })));
      }
    });
    describe('decimals()', function () {
      if (options.decimals != null) {
        it("should return '" + options.decimals + "'", /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee46() {
          return _regenerator["default"].wrap(function _callee46$(_context46) {
            while (1) {
              switch (_context46.prev = _context46.next) {
                case 0:
                  _context46.t0 = expect;
                  _context46.next = 3;
                  return contract.decimals.call();

                case 3:
                  _context46.t1 = _context46.sent;
                  (0, _context46.t0)(_context46.t1).to.be.bignumber.equal((0, _helpers.bn)(options.decimals));

                case 5:
                case "end":
                  return _context46.stop();
              }
            }
          }, _callee46);
        })));
      }
    });
  });

  if (options.increaseDecreaseApproval) {
    describe('approvals', function () {
      describe('increaseApproval(_spender, _addedValue)', function () {
        it('should return true when increasing approval', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee47() {
          return _regenerator["default"].wrap(function _callee47$(_context47) {
            while (1) {
              switch (_context47.prev = _context47.next) {
                case 0:
                  _context47.t0 = assert;
                  _context47.next = 3;
                  return contract.increaseApproval.call(bob, 0, {
                    from: alice
                  });

                case 3:
                  _context47.t1 = _context47.sent;

                  _context47.t0.isTrue.call(_context47.t0, _context47.t1);

                  _context47.t2 = assert;
                  _context47.next = 8;
                  return contract.increaseApproval.call(bob, uintMax, {
                    from: alice
                  });

                case 8:
                  _context47.t3 = _context47.sent;

                  _context47.t2.isTrue.call(_context47.t2, _context47.t3);

                  _context47.next = 12;
                  return contract.increaseApproval(bob, tokens(3), {
                    from: alice
                  });

                case 12:
                  _context47.t4 = assert;
                  _context47.next = 15;
                  return contract.increaseApproval.call(bob, 0, {
                    from: alice
                  });

                case 15:
                  _context47.t5 = _context47.sent;

                  _context47.t4.isTrue.call(_context47.t4, _context47.t5);

                  _context47.t6 = assert;
                  _context47.next = 20;
                  return contract.increaseApproval.call(bob, tokens(3), {
                    from: alice
                  });

                case 20:
                  _context47.t7 = _context47.sent;

                  _context47.t6.isTrue.call(_context47.t6, _context47.t7);

                case 22:
                case "end":
                  return _context47.stop();
              }
            }
          }, _callee47);
        })));
        it('should revert when approval cannot be increased', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee48() {
          return _regenerator["default"].wrap(function _callee48$(_context48) {
            while (1) {
              switch (_context48.prev = _context48.next) {
                case 0:
                  _context48.next = 2;
                  return contract.increaseApproval(bob, tokens(1), {
                    from: alice
                  });

                case 2:
                  _context48.next = 4;
                  return (0, _helpers.expectRevertOrFail)(contract.increaseApproval(bob, uintMax, {
                    from: alice
                  }));

                case 4:
                case "end":
                  return _context48.stop();
              }
            }
          }, _callee48);
        })));
        it('should update allowance accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee49() {
          return _regenerator["default"].wrap(function _callee49$(_context49) {
            while (1) {
              switch (_context49.prev = _context49.next) {
                case 0:
                  _context49.next = 2;
                  return contract.increaseApproval(bob, tokens(1), {
                    from: alice
                  });

                case 2:
                  _context49.t0 = expect;
                  _context49.next = 5;
                  return contract.allowance(alice, bob);

                case 5:
                  _context49.t1 = _context49.sent;
                  (0, _context49.t0)(_context49.t1).to.be.bignumber.equal(tokens(1));
                  _context49.next = 9;
                  return contract.increaseApproval(bob, tokens(2), {
                    from: alice
                  });

                case 9:
                  _context49.t2 = expect;
                  _context49.next = 12;
                  return contract.allowance(alice, bob);

                case 12:
                  _context49.t3 = _context49.sent;
                  (0, _context49.t2)(_context49.t3).to.be.bignumber.equal(tokens(3));
                  _context49.next = 16;
                  return contract.increaseApproval(bob, 0, {
                    from: alice
                  });

                case 16:
                  _context49.t4 = expect;
                  _context49.next = 19;
                  return contract.allowance(alice, bob);

                case 19:
                  _context49.t5 = _context49.sent;
                  (0, _context49.t4)(_context49.t5).to.be.bignumber.equal(tokens(3));

                case 21:
                case "end":
                  return _context49.stop();
              }
            }
          }, _callee49);
        })));
        it('should fire Approval event', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee50() {
          return _regenerator["default"].wrap(function _callee50$(_context50) {
            while (1) {
              switch (_context50.prev = _context50.next) {
                case 0:
                  _context50.next = 2;
                  return testApprovalEvent(alice, bob, 0, tokens(1));

                case 2:
                  _context50.next = 4;
                  return testApprovalEvent(alice, bob, tokens(1), tokens(2));

                case 4:
                case "end":
                  return _context50.stop();
              }
            }
          }, _callee50);
        })));
        it('should fire Approval even when allowance did not change', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee51() {
          return _regenerator["default"].wrap(function _callee51$(_context51) {
            while (1) {
              switch (_context51.prev = _context51.next) {
                case 0:
                  _context51.next = 2;
                  return testApprovalEvent(alice, bob, 0, 0);

                case 2:
                  _context51.next = 4;
                  return contract.increaseApproval(bob, tokens(3), {
                    from: alice
                  });

                case 4:
                  _context51.next = 6;
                  return testApprovalEvent(alice, bob, tokens(3), 0);

                case 6:
                case "end":
                  return _context51.stop();
              }
            }
          }, _callee51);
        })));

        function testApprovalEvent(_x13, _x14, _x15, _x16) {
          return _testApprovalEvent2.apply(this, arguments);
        }

        function _testApprovalEvent2() {
          _testApprovalEvent2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee52(from, to, fromAmount, byAmount) {
            var result;
            return _regenerator["default"].wrap(function _callee52$(_context52) {
              while (1) {
                switch (_context52.prev = _context52.next) {
                  case 0:
                    _context52.next = 2;
                    return contract.increaseApproval(to, byAmount, {
                      from: from
                    });

                  case 2:
                    result = _context52.sent;
                    assert.equal(log.event, 'Approval');
                    assert.equal(log.args.owner, from);
                    assert.equal(log.args.spender, to);
                    expect(log.args.value).to.be.bignumber.equal((0, _helpers.bn)(fromAmount).add(byAmount));

                  case 7:
                  case "end":
                    return _context52.stop();
                }
              }
            }, _callee52);
          }));
          return _testApprovalEvent2.apply(this, arguments);
        }
      });
      describe('decreaseApproval(_spender, _subtractedValue)', function () {
        beforeEach( /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee53() {
          return _regenerator["default"].wrap(function _callee53$(_context53) {
            while (1) {
              switch (_context53.prev = _context53.next) {
                case 0:
                  _context53.next = 2;
                  return contract.approve(bob, tokens(3), {
                    from: alice
                  });

                case 2:
                case "end":
                  return _context53.stop();
              }
            }
          }, _callee53);
        })));
        it('should return true when decreasing approval', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee54() {
          return _regenerator["default"].wrap(function _callee54$(_context54) {
            while (1) {
              switch (_context54.prev = _context54.next) {
                case 0:
                  _context54.t0 = assert;
                  _context54.next = 3;
                  return contract.decreaseApproval.call(bob, 0, {
                    from: alice
                  });

                case 3:
                  _context54.t1 = _context54.sent;

                  _context54.t0.isTrue.call(_context54.t0, _context54.t1);

                  _context54.t2 = assert;
                  _context54.next = 8;
                  return contract.decreaseApproval.call(bob, tokens(3), {
                    from: alice
                  });

                case 8:
                  _context54.t3 = _context54.sent;

                  _context54.t2.isTrue.call(_context54.t2, _context54.t3);

                case 10:
                case "end":
                  return _context54.stop();
              }
            }
          }, _callee54);
        })));
        it('should return true when approval cannot be decreased', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee55() {
          return _regenerator["default"].wrap(function _callee55$(_context55) {
            while (1) {
              switch (_context55.prev = _context55.next) {
                case 0:
                  _context55.t0 = assert;
                  _context55.next = 3;
                  return contract.decreaseApproval.call(bob, uintMax, {
                    from: alice
                  });

                case 3:
                  _context55.t1 = _context55.sent;

                  _context55.t0.isTrue.call(_context55.t0, _context55.t1);

                case 5:
                case "end":
                  return _context55.stop();
              }
            }
          }, _callee55);
        })));
        it('should update allowance accordingly', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee56() {
          return _regenerator["default"].wrap(function _callee56$(_context56) {
            while (1) {
              switch (_context56.prev = _context56.next) {
                case 0:
                  _context56.next = 2;
                  return contract.decreaseApproval(bob, tokens(1), {
                    from: alice
                  });

                case 2:
                  _context56.t0 = expect;
                  _context56.next = 5;
                  return contract.allowance(alice, bob);

                case 5:
                  _context56.t1 = _context56.sent;
                  (0, _context56.t0)(_context56.t1).to.be.bignumber.equal(tokens(2));
                  _context56.next = 9;
                  return contract.decreaseApproval(bob, tokens(3), {
                    from: alice
                  });

                case 9:
                  _context56.t2 = expect;
                  _context56.next = 12;
                  return contract.allowance(alice, bob);

                case 12:
                  _context56.t3 = _context56.sent;
                  (0, _context56.t2)(_context56.t3).to.be.bignumber.equal(0);
                  _context56.next = 16;
                  return contract.decreaseApproval(bob, 0, {
                    from: alice
                  });

                case 16:
                  _context56.t4 = expect;
                  _context56.next = 19;
                  return contract.allowance(alice, bob);

                case 19:
                  _context56.t5 = _context56.sent;
                  (0, _context56.t4)(_context56.t5).to.be.bignumber.equal(0);

                case 21:
                case "end":
                  return _context56.stop();
              }
            }
          }, _callee56);
        })));
        it('should fire Approval event', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee57() {
          return _regenerator["default"].wrap(function _callee57$(_context57) {
            while (1) {
              switch (_context57.prev = _context57.next) {
                case 0:
                  _context57.next = 2;
                  return testApprovalEvent(alice, bob, tokens(3), tokens(1));

                case 2:
                  _context57.next = 4;
                  return testApprovalEvent(alice, bob, tokens(2), tokens(2));

                case 4:
                case "end":
                  return _context57.stop();
              }
            }
          }, _callee57);
        })));
        it('should fire Approval even when allowance did not change', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee58() {
          return _regenerator["default"].wrap(function _callee58$(_context58) {
            while (1) {
              switch (_context58.prev = _context58.next) {
                case 0:
                  _context58.next = 2;
                  return testApprovalEvent(alice, bob, tokens(3), 0);

                case 2:
                  _context58.next = 4;
                  return contract.decreaseApproval(bob, tokens(3), {
                    from: alice
                  });

                case 4:
                  _context58.next = 6;
                  return testApprovalEvent(alice, bob, 0, 0);

                case 6:
                case "end":
                  return _context58.stop();
              }
            }
          }, _callee58);
        })));

        function testApprovalEvent(_x17, _x18, _x19, _x20) {
          return _testApprovalEvent3.apply(this, arguments);
        }

        function _testApprovalEvent3() {
          _testApprovalEvent3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee59(from, to, fromAmount, byAmount) {
            var result, log;
            return _regenerator["default"].wrap(function _callee59$(_context59) {
              while (1) {
                switch (_context59.prev = _context59.next) {
                  case 0:
                    _context59.next = 2;
                    return contract.decreaseApproval(to, byAmount, {
                      from: from
                    });

                  case 2:
                    result = _context59.sent;
                    log = result.logs[0];
                    assert.equal(log.event, 'Approval');
                    assert.equal(log.args.owner, from);
                    assert.equal(log.args.spender, to);
                    expect(log.args.value).to.be.bignumber.equal((0, _helpers.bn)(fromAmount).sub(byAmount));

                  case 8:
                  case "end":
                    return _context59.stop();
                }
              }
            }, _callee59);
          }));
          return _testApprovalEvent3.apply(this, arguments);
        }
      });
    });
  }
};
/**
 * Formats the describe-case name.
 * @param {string} name
 */


function when(name) {
  return 'when (' + name + ')';
}