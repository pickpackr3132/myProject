'use strict';
/**
 * Converts given value to BN object if it is number or string. Otherwise defaultValue is
 * returned in case given value is not truthy.
 *
 * @param {number|string|BN|null} number
 * @param {number|string|BN|null} [defaultValue]
 * @returns {BN|null}
 */

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bn = bn;
exports.expectRevert = expectRevert;
exports.expectRevertOrFail = expectRevertOrFail;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

function bn(number) {
  var defaultValue = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

  if (number == null) {
    if (defaultValue == null) {
      return null;
    }

    number = defaultValue;
  }

  return web3.utils.toBN(number);
}
/**
 * Asserts that given promise will throw because of revert().
 * @param {Promise} promise
 */


function expectRevert(_x) {
  return _expectRevert.apply(this, arguments);
}
/**
 * Asserts that given promise will throw because of revert() or failed assertion.
 * @param {Promise} promise
 */


function _expectRevert() {
  _expectRevert = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(promise) {
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return expectError(promise, ['revert']);

          case 2:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _expectRevert.apply(this, arguments);
}

function expectRevertOrFail(_x2) {
  return _expectRevertOrFail.apply(this, arguments);
}
/**
 * Asserts that given promise will throw and that thrown message will contain one of the given
 * search strings.
 *
 * @param {Promise} promise The promise expecting to throw.
 * @param {string[]} messages List of expected thrown message search strings.
 */


function _expectRevertOrFail() {
  _expectRevertOrFail = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(promise) {
    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return expectError(promise, ['revert', 'invalid opcode']);

          case 2:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _expectRevertOrFail.apply(this, arguments);
}

function expectError(_x3, _x4) {
  return _expectError.apply(this, arguments);
}

function _expectError() {
  _expectError = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(promise, messages) {
    var i;
    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _context3.prev = 0;
            _context3.next = 3;
            return promise;

          case 3:
            _context3.next = 15;
            break;

          case 5:
            _context3.prev = 5;
            _context3.t0 = _context3["catch"](0);
            i = 0;

          case 8:
            if (!(i < messages.length)) {
              _context3.next = 14;
              break;
            }

            if (!(_context3.t0.message.search(messages[i]) >= 0)) {
              _context3.next = 11;
              break;
            }

            return _context3.abrupt("return");

          case 11:
            i++;
            _context3.next = 8;
            break;

          case 14:
            assert.fail("Expected revert, got '" + _context3.t0 + "' instead.");

          case 15:
            assert.fail('Expected revert not received.');

          case 16:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3, null, [[0, 5]]);
  }));
  return _expectError.apply(this, arguments);
}